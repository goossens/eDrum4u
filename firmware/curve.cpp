//	eDrum4u
//	Copyright (c) 2021-2022 Johan A. Goossens. All rights reserved.
//
//	This work is licensed under the terms of the MIT license.
//	For a copy, see <https://opensource.org/licenses/MIT>.


//
//	Include files
//

#include <string.h>
#include <usb_midi.h>

#include "config.h"
#include "curve.h"


//
//	Curve tables
//

static const uint8_t linearCurve[128] = {
	0, 1, 2, 3, 4, 5, 6, 7,
	8, 9, 10, 11, 12, 13, 14, 15,
	16, 17, 18, 19, 20, 21, 22, 23,
	24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39,
	40, 41, 42, 43, 44, 45, 46, 47,
	48, 49, 50, 51, 52, 53, 54, 55,
	56, 57, 58, 59, 60, 61, 62, 63,
	64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79,
	80, 81, 82, 83, 84, 85, 86, 87,
	88, 89, 90, 91, 92, 93, 94, 95,
	96, 97, 98, 99, 100, 101, 102, 103,
	104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119,
	120, 121, 122, 123, 124, 125, 126, 127
};

static const uint8_t exp1Curve[128] = {
	0, 0, 1, 1, 2, 2, 3, 4,
	4, 5, 6, 6, 7, 7, 8, 9,
	9, 10, 11, 11, 12, 13, 13, 14,
	15, 16, 16, 17, 18, 18, 19, 20,
	21, 21, 22, 23, 24, 24, 25, 26,
	27, 28, 28, 29, 30, 31, 32, 33,
	33, 34, 35, 36, 37, 38, 39, 40,
	40, 41, 42, 43, 44, 45, 46, 47,
	48, 49, 50, 51, 52, 53, 54, 55,
	56, 57, 58, 59, 60, 61, 62, 63,
	64, 65, 67, 68, 69, 70, 71, 72,
	73, 75, 76, 77, 78, 79, 81, 82,
	83, 84, 85, 87, 88, 89, 91, 92,
	93, 95, 96, 97, 99, 100, 101, 103,
	104, 106, 107, 108, 110, 111, 113, 114,
	116, 117, 119, 120, 122, 123, 125, 127
};

static const uint8_t exp2Curve[128] = {
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1, 1, 1, 1, 1,
	1, 2, 2, 2, 2, 2, 3, 3,
	3, 3, 4, 4, 4, 4, 5, 5,
	5, 6, 6, 6, 7, 7, 8, 8,
	9, 9, 10, 10, 11, 11, 12, 12,
	13, 13, 14, 15, 15, 16, 17, 17,
	18, 19, 19, 20, 21, 22, 23, 24,
	25, 25, 26, 27, 28, 29, 30, 32,
	33, 34, 35, 36, 37, 39, 40, 41,
	42, 44, 45, 47, 48, 50, 51, 53,
	54, 56, 58, 59, 61, 63, 65, 67,
	69, 71, 73, 75, 77, 79, 81, 83,
	86, 88, 90, 93, 95, 98, 100, 103,
	106, 109, 111, 114, 117, 120, 123, 127
};

static const uint8_t log1Curve[128] = {
	0, 1, 2, 4, 5, 7, 8, 9,
	11, 12, 13, 15, 16, 17, 19, 20,
	21, 23, 24, 25, 26, 28, 29, 30,
	31, 32, 34, 35, 36, 37, 38, 40,
	41, 42, 43, 44, 45, 46, 47, 49,
	50, 51, 52, 53, 54, 55, 56, 57,
	58, 59, 60, 61, 62, 63, 64, 65,
	66, 67, 68, 69, 70, 71, 72, 73,
	74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 85, 86, 87, 88,
	89, 90, 91, 92, 93, 93, 94, 95,
	96, 97, 98, 98, 99, 100, 101, 102,
	103, 103, 104, 105, 106, 107, 108, 108,
	109, 110, 111, 111, 112, 113, 114, 115,
	115, 116, 117, 118, 118, 119, 120, 121,
	121, 122, 123, 124, 124, 125, 126, 127
};

static const uint8_t log2Curve[128] = {
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 1, 1, 1, 2, 2, 2, 3,
	3, 4, 4, 5, 5, 6, 6, 7,
	7, 8, 9, 9, 10, 11, 11, 12,
	13, 14, 14, 15, 16, 17, 18, 18,
	19, 20, 21, 22, 23, 24, 25, 26,
	27, 28, 29, 30, 31, 32, 33, 34,
	35, 36, 37, 38, 39, 40, 41, 42,
	44, 45, 46, 47, 48, 49, 50, 52,
	53, 54, 55, 56, 58, 59, 60, 61,
	63, 64, 65, 66, 68, 69, 70, 71,
	73, 74, 75, 77, 78, 79, 81, 82,
	83, 85, 86, 87, 89, 90, 91, 93,
	94, 95, 97, 98, 100, 101, 102, 104,
	105, 107, 108, 109, 111, 112, 114, 115,
	116, 118, 119, 121, 122, 124, 125, 127
};

static const uint8_t loud1Curve[128] = {
	31, 32, 33, 34, 34, 35, 36, 37,
	37, 38, 39, 40, 40, 41, 42, 43,
	43, 44, 45, 46, 46, 47, 48, 49,
	49, 50, 51, 52, 52, 53, 54, 55,
	55, 56, 57, 58, 58, 59, 60, 61,
	61, 62, 63, 64, 64, 65, 66, 67,
	67, 68, 69, 70, 70, 71, 72, 73,
	73, 74, 75, 76, 76, 77, 78, 79,
	79, 80, 81, 82, 82, 83, 84, 85,
	85, 86, 87, 88, 88, 89, 90, 91,
	91, 92, 93, 94, 94, 95, 96, 97,
	97, 98, 99, 100, 100, 101, 102, 103,
	103, 104, 105, 105, 106, 107, 108, 108,
	109, 110, 111, 112, 112, 113, 114, 115,
	115, 116, 117, 118, 118, 119, 120, 120,
	121, 122, 123, 124, 124, 125, 126, 127
};

static const uint8_t loud2Curve[128] = {
	95, 95, 95, 96, 96, 96, 96, 97,
	97, 97, 97, 98, 98, 98, 98, 99,
	99, 99, 99, 100, 100, 100, 100, 101,
	101, 101, 101, 102, 102, 102, 102, 103,
	103, 103, 103, 103, 104, 104, 104, 105,
	105, 105, 105, 106, 106, 106, 106, 107,
	107, 107, 107, 108, 108, 108, 108, 109,
	109, 109, 109, 110, 110, 110, 110, 111,
	111, 111, 111, 112, 112, 112, 112, 113,
	113, 113, 113, 114, 114, 114, 114, 115,
	115, 115, 115, 116, 116, 116, 116, 117,
	117, 117, 117, 118, 118, 118, 118, 119,
	119, 119, 119, 120, 120, 120, 120, 121,
	121, 121, 121, 122, 122, 122, 122, 123,
	123, 123, 123, 124, 124, 124, 124, 125,
	125, 125, 125, 126, 126, 126, 126, 127
};

static const uint8_t splineCurve[128] = {
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 2, 2,
	2, 3, 3, 3, 4, 4, 5, 5,
	6, 6, 7, 8, 8, 9, 10, 11,
	12, 13, 14, 16, 17, 18, 20, 22,
	23, 25, 27, 29, 32, 34, 36, 39,
	42, 44, 47, 50, 53, 56, 59, 62,
	65, 68, 71, 74, 76, 79, 82, 85,
	87, 90, 92, 95, 97, 99, 101, 103,
	105, 106, 108, 109, 111, 112, 113, 114,
	115, 116, 117, 118, 119, 119, 120, 121,
	121, 122, 122, 123, 123, 123, 124, 124,
	124, 124, 125, 125, 125, 125, 125, 125,
	126, 126, 126, 126, 126, 126, 126, 126,
	126, 126, 126, 126, 126, 126, 126, 127
};


//
//	Curve names
//

static const char* names[] {
	"Linear",
	"Exp1",
	"Exp2",
	"Log1",
	"Log2",
	"Loud1",
	"Loud2",
	"Spline"
};


//
//	Curve::Curve
//

Curve::Curve() {
	id = CURVE_LINEAR;
	translator = linearCurve;
}

Curve::Curve(int i) {
	id = i;

	switch (id) {
		case CURVE_LINEAR:
			translator = linearCurve;
			break;

		case CURVE_EXP1:
			translator = exp1Curve;
			break;

		case CURVE_EXP2:
			translator = exp2Curve;
			break;

		case CURVE_LOG1:
			translator = log1Curve;
			break;

		case CURVE_LOG2:
			translator = log2Curve;
			break;

		case CURVE_LOUD1:
			translator = loud1Curve;
			break;

		case CURVE_LOUD2:
			translator = loud2Curve;
			break;

		case CURVE_SPLINE:
			translator = splineCurve;
			break;
	}
}


//
//	Curve::sendAsMidi
//

void Curve::sendAsMidi() {
	struct {
		uint8_t start;
		uint8_t vendor;
		uint8_t command;
		uint8_t seqno;
		char name[9];
		uint8_t end;
	} msg = {
		0xf0,
		MIDI_VENDOR_ID,
		MIDI_SEND_CURVE,
		(uint8_t) id,
		{ 0 },
		0xf7
	};

	strcpy(msg.name, names[id]);
	usbMIDI.sendSysEx(sizeof(msg), (uint8_t*) &msg, true);
}
